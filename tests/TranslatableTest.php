<?php

namespace Zai\Translate\Tests;

use Zai\Translate\Tests\Model\Article;

class TranslatableTest extends TestBase
{
    protected $article;

    protected $translationAttributesWithValidKeys;

    protected $translationAttributesWithEvilKeys;

    protected $translationAttributesWithMissingKeys;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->article = Article::create([
            'title' => 'Hello world',
            'body' => 'Laravel is awesome!'
        ]);

        $this->translationAttributesWithValidKeys = [
            'locale' => 'fr',
            'title' => 'Bonjour',
            'body' => 'Laravel est génial!'
        ];

        $this->translationAttributesWithEvilKeys = [
            'locale' => 'fr',
            'title' => 'Bonjour',
            'body' => 'Laravel est génial!',
            'evil_key' => 'evil content'
        ];

        $this->translationAttributesWithMissingKeys = [
            'locale' => 'fr',
            'title' => 'Bonjour'
        ];
    }

    public function test_can_add_translation()
    {
        $this->article->addTranslation($this->translationAttributesWithValidKeys);

        $this->assertCount(1, $this->article->translations);
        $this->assertInstanceOf('Illuminate\Database\Eloquent\Collection', $this->article->translations);
    }

    public function test_can_show_current_translation_based_on_current_locale()
    {
        $this->article->addTranslation($this->translationAttributesWithValidKeys);

        app()->setLocale($this->translationAttributesWithValidKeys['locale']);

        $this->assertEquals('Bonjour', $this->article->translation->title);
        $this->assertEquals('Laravel est génial!', $this->article->translation->body);
    }

    public function test_can_show_default_value_when_no_translation_exists()
    {
        $this->assertCount(0, $this->article->translations);
        $this->assertEquals('Hello world', $this->article->translation->title);
        $this->assertEquals('Laravel is awesome!', $this->article->translation->body);

        app()->setLocale('fr');

        $this->assertEquals('Hello world', $this->article->translation->title);
        $this->assertEquals('Laravel is awesome!', $this->article->translation->body);
    }

    public function test_only_translatables_keys_are_added()
    {
        $this->article->addTranslation($this->translationAttributesWithEvilKeys);

        $this->assertFalse(array_key_exists('evil_key', $this->article->translation));
        $this->assertTrue(array_key_exists('title', $this->article->translation));
        $this->assertTrue(array_key_exists('body', $this->article->translation));
    }

    public function test_missing_keys_still_added_with_value_empty_string()
    {
        $this->article->addTranslation($this->translationAttributesWithMissingKeys);

        app()->setLocale('fr');
        $this->assertTrue(array_key_exists('body', $this->article->translation));
        $this->assertEquals('', $this->article->translation->body);
    }

    /**
     * If add translation to an existing one, the existing one will be updated
     */
    public function test_add_translation_update_an_existing_translation()
    {
        $this->article->addTranslation($this->translationAttributesWithValidKeys);

        $this->article->addTranslation([
            'locale' => 'fr',
            'title' => 'new title',
            'body' => 'new body'
        ]);

        app()->setLocale('fr');

        $this->assertCount(1, $this->article->fresh()->translations);
        $this->assertEquals('new title', $this->article->translation->title);
        $this->assertEquals('new body', $this->article->translation->body);
    }

    public function test_can_update_an_existing_translation()
    {
        $this->article->addTranslation($this->translationAttributesWithValidKeys);

        $newTranslation = [
            'locale' => 'fr',
            'title' => 'new title',
            'body' => 'new body'
        ];

        $this->article->UpdateTranslation($newTranslation);

        app()->setLocale('fr');

        $this->assertCount(1, $this->article->fresh()->translations);
        $this->assertEquals('new title', $this->article->translation->title);
        $this->assertEquals('new body', $this->article->translation->body);
    }

    public function test_update_none_existing_translation_will_create_a_new_translation()
    {
        $this->assertCount(0, $this->article->translations);

        $this->article->updateTranslation($this->translationAttributesWithValidKeys);

        $this->assertCount(1, $this->article->fresh()->translations);
    }

    public function test_can_delete_a_translation()
    {
        $this->article->addTranslation($this->translationAttributesWithValidKeys);
        $this->assertCount(1, $this->article->translations);

        $this->article->deleteTranslation('fr');
        $this->assertCount(0, $this->article->fresh()->translations);
    }

    public function test_can_delete_all_translations()
    {
        $this->article->addTranslation($this->translationAttributesWithValidKeys);

        $this->article->addTranslation([
            'locale' => 'zh',
            'title' => 'xxx',
            'body' => 'xxx'
        ]);

        $this->assertCount(2, $this->article->translations);

        $this->article->deleteTranslations();

        $this->assertCount(0, $this->article->fresh()->translations);
    }

    public function test_can_check_if_translations_existing()
    {
        $this->assertFalse($this->article->hasTranslations());

        $this->article->addTranslation($this->translationAttributesWithValidKeys);

        $this->assertTrue($this->article->hasTranslations());
    }

    public function test_can_check_if_translation_of_a_local_existing()
    {
        $this->assertFalse($this->article->hasTranslation('fr'));

        $this->article->addTranslation($this->translationAttributesWithValidKeys);

        $this->assertTrue($this->article->hasTranslation('fr'));
    }

    public function test_can_get_all_translation()
    {
        $this->article->addTranslation($this->translationAttributesWithValidKeys);

        $this->article->addTranslation([
            'locale' => 'zh',
            'title' => 'xxx',
            'body' => 'xxx'
        ]);

        $translations = $this->article->translations;

        $this->assertCount(2, $translations);
        $this->assertEquals(['fr', 'zh'], $translations->pluck('locale')->toArray());
    }

    public function test_can_get_translation_of_a_locale()
    {
        $this->article->addTranslation($this->translationAttributesWithValidKeys);

        $translation = $this->article->fresh()
            ->translationOf($this->translationAttributesWithValidKeys['locale']);

        $this->assertEquals('Bonjour', $translation['data']['title']);
        $this->assertEquals('Laravel est génial!', $translation['data']['body']);
    }
}
